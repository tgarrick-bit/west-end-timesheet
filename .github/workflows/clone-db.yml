name: Clone Prod DB to Staging (public only, schema then data)
on:
  workflow_dispatch: {}   # run manually from Actions
jobs:
  clone:
    runs-on: ubuntu-latest
    env:
      PGSSLMODE: require
      PGCONNECT_TIMEOUT: "15"
      PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      STG_DATABASE_URL:  ${{ secrets.STG_DATABASE_URL }}
    steps:
      - name: Install Postgres client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Show client versions
        run: |
          psql --version
          pg_dump --version
          pg_restore --version

      - name: Connectivity check (PROD)
        run: |
          echo "Checking PROD connectivity…"
          psql "$PROD_DATABASE_URL" -Atc "select 'PROD OK', current_database(), now();"

      - name: Connectivity check (STAGING)
        run: |
          echo "Checking STAGING connectivity…"
          psql "$STG_DATABASE_URL" -Atc "select 'STAGING OK', current_database(), now();"

      - name: Prepare STAGING public schema (drops & recreates ONLY public)
        run: |
          psql "$STG_DATABASE_URL" -v ON_ERROR_STOP=1 -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"

      - name: Dump SCHEMA from PROD (public only, plain SQL)
        run: |
          pg_dump "$PROD_DATABASE_URL" -n public -s -v -f schema.sql

      - name: Restore SCHEMA to STAGING (public only)
        run: |
          psql "$STG_DATABASE_URL" -v ON_ERROR_STOP=1 -f schema.sql

      - name: Dump DATA from PROD (public only, custom format)
        run: |
          pg_dump "$PROD_DATABASE_URL" -n public -a -v -Fc -f data.bin

      - name: Restore DATA to STAGING (public only, no owner/privs)
        run: |
          pg_restore -v --no-owner --no-privileges -n public -d "$STG_DATABASE_URL" data.bin

      - name: Post-restore sanity check (table count)
        run: |
          psql "$STG_DATABASE_URL" -Atc "select 'STAGING public tables', count(*) from information_schema.tables where table_schema='public';"

